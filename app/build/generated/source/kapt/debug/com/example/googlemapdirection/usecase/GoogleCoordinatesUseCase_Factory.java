// Generated by Dagger (https://dagger.dev).
package com.example.googlemapdirection.usecase;

import com.example.googlemapdirection.repo.GoogleCoordinatesRepository;
import com.example.googlemapdirection.utils.SessionManagerClass;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GoogleCoordinatesUseCase_Factory implements Factory<GoogleCoordinatesUseCase> {
  private final Provider<GoogleCoordinatesRepository> repositoryProvider;

  private final Provider<SessionManagerClass> sessionManagerClassProvider;

  public GoogleCoordinatesUseCase_Factory(Provider<GoogleCoordinatesRepository> repositoryProvider,
      Provider<SessionManagerClass> sessionManagerClassProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sessionManagerClassProvider = sessionManagerClassProvider;
  }

  @Override
  public GoogleCoordinatesUseCase get() {
    return newInstance(repositoryProvider.get(), sessionManagerClassProvider.get());
  }

  public static GoogleCoordinatesUseCase_Factory create(
      Provider<GoogleCoordinatesRepository> repositoryProvider,
      Provider<SessionManagerClass> sessionManagerClassProvider) {
    return new GoogleCoordinatesUseCase_Factory(repositoryProvider, sessionManagerClassProvider);
  }

  public static GoogleCoordinatesUseCase newInstance(GoogleCoordinatesRepository repository,
      SessionManagerClass sessionManagerClass) {
    return new GoogleCoordinatesUseCase(repository, sessionManagerClass);
  }
}
